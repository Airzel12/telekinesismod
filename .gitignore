using BepInEx;
using HarmonyLib;
using UnityEngine;
using System.Collections.Generic;

namespace TelekinesisMod
{
    [BepInPlugin("com.yourname.telekinesis", "Telekinesis Mod", "1.0.0")]
    [BepInDependency("com.bepinex.harmony")]
    public class TelekinesisMod : BaseUnityPlugin
    {
        // Configurable settings
        private const int MaxGrabbedObjects = 2;
        private const float MaxGrabRange = 5f;
        private const float MinThrowForce = 5f;
        private const float MaxThrowForce = 15f;
        private const float HoldDistance = 2f;

        public static TelekinesisMod Instance; // Singleton for easy access
        public List<GameObject> GrabbedObjects { get; private set; } = new List<GameObject>();
        public Transform PlayerTransform { get; private set; }

        void Awake()
        {
            Instance = this;
            Logger.LogInfo("Telekinesis Mod loaded!");

            Harmony harmony = new Harmony("com.yourname.telekinesis");
            harmony.PatchAll();
        }

        // Method to set the player transform (called from a patch)
        public void SetPlayerTransform(Transform player)
        {
            if (PlayerTransform == null)
            {
                PlayerTransform = player;
                Logger.LogDebug("Player transform set!");
            }
        }

        // Method to try grabbing an object
        public void TryGrabObject()
        {
            if (GrabbedObjects.Count >= MaxGrabbedObjects || PlayerTransform == null) return;

            RaycastHit hit;
            if (Physics.Raycast(PlayerTransform.position, PlayerTransform.forward, out hit, MaxGrabRange))
            {
                GameObject target = hit.collider.gameObject;
                if (target == PlayerTransform.gameObject || GrabbedObjects.Contains(target))
                {
                    Logger.LogDebug($"Cannot grab: {target.name}");
                    return;
                }

                float distanceToTarget = Vector3.Distance(PlayerTransform.position, target.transform.position);
                GrabbedObjects.Add(target);
                Logger.LogInfo($"Grabbed: {target.name} at distance {distanceToTarget}");
            }
        }

        // Method to throw the last grabbed object
        public void ThrowObject()
        {
            if (GrabbedObjects.Count == 0 || PlayerTransform == null) return;

            GameObject toThrow = GrabbedObjects[GrabbedObjects.Count - 1];
            float distanceWhenGrabbed = Vector3.Distance(PlayerTransform.position, toThrow.transform.position);
            float throwForce = Mathf.Lerp(MinThrowForce, MaxThrowForce, distanceWhenGrabbed / MaxGrabRange);

            GrabbedObjects.Remove(toThrow);
            TelekinesisPatches.ThrowObject(toThrow, PlayerTransform.forward, throwForce);
            Logger.LogInfo($"Thrown: {toThrow.name} with force {throwForce}");
        }
    }

    [HarmonyPatch]
    public class TelekinesisPatches
    {
        // Patch to find the player and handle input/update logic
        // Replace "PlayerControllerB" with the actual player class name from Lethal Company
        [HarmonyPatch(typeof(PlayerControllerB), "Update")]
        [HarmonyPostfix]
        static void PlayerUpdatePatch(PlayerControllerB __instance)
        {
            if (TelekinesisMod.Instance == null) return;

            // Set player transform once
            TelekinesisMod.Instance.SetPlayerTransform(__instance.transform);

            // Input handling
            if (Input.GetKeyDown(KeyCode.T))
            {
                TelekinesisMod.Instance.TryGrabObject();
            }
            if (Input.GetKeyDown(KeyCode.F))
            {
                TelekinesisMod.Instance.ThrowObject();
            }

            // Update grabbed objects
            foreach (GameObject obj in TelekinesisMod.Instance.GrabbedObjects)
            {
                Vector3 targetPosition = TelekinesisMod.Instance.PlayerTransform.position + 
                                        TelekinesisMod.Instance.PlayerTransform.forward * 2f;
                obj.transform.position = Vector3.Lerp(obj.transform.position, targetPosition, Time.deltaTime * 10f);
            }
        }

        // Method to handle throwing (custom logic)
        public static void ThrowObject(GameObject obj, Vector3 direction, float force)
        {
            Vector3 throwVelocity = direction.normalized * force;
            obj.transform.position += throwVelocity * Time.deltaTime; // Placeholder movement

            // TODO: Patch into Lethal Company's movement system here
            Debug.Log($"Throwing {obj.name} with force {force}");
        }

        // Optional: Patch for grabbable objects (replace with actual class)
        [HarmonyPatch(typeof(/* GrabbableObject */), "LateUpdate")]
        [HarmonyPostfix]
        static void GrabbableObjectPatch(/* GrabbableObject */ __instance)
        {
            // Add logic here if you need to manipulate grabbable objects directly
        }
    }
}
